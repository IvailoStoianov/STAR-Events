// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STAREvents.Web.Data;

#nullable disable

namespace STAREvents.Data.Migrations
{
    [DbContext(typeof(STAREventsDbContext))]
    partial class STAREventsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("STAREvents.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("STAREvents.Data.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = new Guid("d3b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Music"
                        },
                        new
                        {
                            CategoryID = new Guid("e4b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Sports"
                        },
                        new
                        {
                            CategoryID = new Guid("f5b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Technology"
                        },
                        new
                        {
                            CategoryID = new Guid("a6b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Education"
                        },
                        new
                        {
                            CategoryID = new Guid("b7b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Health"
                        },
                        new
                        {
                            CategoryID = new Guid("c8b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Art"
                        },
                        new
                        {
                            CategoryID = new Guid("d9b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Business"
                        },
                        new
                        {
                            CategoryID = new Guid("eab07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Science"
                        },
                        new
                        {
                            CategoryID = new Guid("fbb07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Comedy"
                        },
                        new
                        {
                            CategoryID = new Guid("acb07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Travel"
                        },
                        new
                        {
                            CategoryID = new Guid("bdb07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Lifestyle"
                        },
                        new
                        {
                            CategoryID = new Guid("cec07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Fitness"
                        },
                        new
                        {
                            CategoryID = new Guid("dfd07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Gaming"
                        },
                        new
                        {
                            CategoryID = new Guid("e0e07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Cooking"
                        },
                        new
                        {
                            CategoryID = new Guid("f1f07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "History"
                        },
                        new
                        {
                            CategoryID = new Guid("a2a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Politics"
                        },
                        new
                        {
                            CategoryID = new Guid("b3b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Finance"
                        },
                        new
                        {
                            CategoryID = new Guid("c4c07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Nature"
                        },
                        new
                        {
                            CategoryID = new Guid("d5d07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Photography"
                        },
                        new
                        {
                            CategoryID = new Guid("e6e07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Writing"
                        },
                        new
                        {
                            CategoryID = new Guid("f7f07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Dance"
                        },
                        new
                        {
                            CategoryID = new Guid("a8a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Film"
                        },
                        new
                        {
                            CategoryID = new Guid("b9b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Literature"
                        },
                        new
                        {
                            CategoryID = new Guid("cac07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Environment"
                        },
                        new
                        {
                            CategoryID = new Guid("dbd07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Social"
                        },
                        new
                        {
                            CategoryID = new Guid("ece07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Community"
                        },
                        new
                        {
                            CategoryID = new Guid("fdf07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Theatre"
                        },
                        new
                        {
                            CategoryID = new Guid("a0a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Networking"
                        },
                        new
                        {
                            CategoryID = new Guid("b1b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Charity"
                        },
                        new
                        {
                            CategoryID = new Guid("c2c07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Name = "Hobbies"
                        });
                });

            modelBuilder.Entity("STAREvents.Data.Models.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CommentId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("STAREvents.Data.Models.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NumberOfParticipants")
                        .HasColumnType("int")
                        .HasComment("This represents how many users have joined the event.");

                    b.Property<Guid>("OrganizerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit")
                        .HasComment("Shows wether the event has been deleted");

                    b.HasKey("EventId");

                    b.HasIndex("CategoryID");

                    b.HasIndex("OrganizerID");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = new Guid("a1a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 100,
                            CategoryID = new Guid("a0a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "A great opportunity to network with professionals.",
                            EndDate = new DateTime(2025, 11, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Networking Event",
                            NumberOfParticipants = 50,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("a2a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 200,
                            CategoryID = new Guid("a2a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Join us for a lively political debate.",
                            EndDate = new DateTime(2025, 11, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Political Debate",
                            NumberOfParticipants = 150,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 2, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("a3a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 150,
                            CategoryID = new Guid("a8a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Watch the latest blockbuster with us.",
                            EndDate = new DateTime(2025, 11, 3, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Film Screening",
                            NumberOfParticipants = 100,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 3, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("a4a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 50,
                            CategoryID = new Guid("a6b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Enhance your skills with our workshop.",
                            EndDate = new DateTime(2025, 11, 4, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Educational Workshop",
                            NumberOfParticipants = 30,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 4, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("a5a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 80,
                            CategoryID = new Guid("acb07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Learn about exciting travel destinations.",
                            EndDate = new DateTime(2025, 11, 5, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Travel Seminar",
                            NumberOfParticipants = 60,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 5, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("a6a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 120,
                            CategoryID = new Guid("b1b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Support a good cause at our fundraiser.",
                            EndDate = new DateTime(2025, 11, 6, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Charity Fundraiser",
                            NumberOfParticipants = 100,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 6, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("a7a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 70,
                            CategoryID = new Guid("b3b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Improve your financial literacy.",
                            EndDate = new DateTime(2025, 11, 7, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Finance Workshop",
                            NumberOfParticipants = 50,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("a8a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 90,
                            CategoryID = new Guid("b7b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Learn about health and wellness.",
                            EndDate = new DateTime(2025, 11, 8, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Health Seminar",
                            NumberOfParticipants = 70,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 8, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("a9a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 60,
                            CategoryID = new Guid("b9b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Discuss your favorite books.",
                            EndDate = new DateTime(2025, 11, 9, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Literature Club",
                            NumberOfParticipants = 40,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 9, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("b0a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 200,
                            CategoryID = new Guid("bdb07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore the latest lifestyle trends.",
                            EndDate = new DateTime(2025, 11, 10, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Lifestyle Expo",
                            NumberOfParticipants = 150,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 10, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("b1a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 100,
                            CategoryID = new Guid("c8b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "View stunning artworks.",
                            EndDate = new DateTime(2025, 11, 11, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Art Exhibition",
                            NumberOfParticipants = 80,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 11, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("b2a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 300,
                            CategoryID = new Guid("d3b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Enjoy live music performances.",
                            EndDate = new DateTime(2025, 11, 12, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Music Concert",
                            NumberOfParticipants = 250,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 12, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("b3a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 150,
                            CategoryID = new Guid("d9b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Network with business professionals.",
                            EndDate = new DateTime(2025, 11, 13, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Business Conference",
                            NumberOfParticipants = 120,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 13, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("b4a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 200,
                            CategoryID = new Guid("e4b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Compete in our sports tournament.",
                            EndDate = new DateTime(2025, 11, 14, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Sports Tournament",
                            NumberOfParticipants = 180,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 14, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("b5a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 100,
                            CategoryID = new Guid("eab07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Explore scientific discoveries.",
                            EndDate = new DateTime(2025, 11, 15, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Science Fair",
                            NumberOfParticipants = 90,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("b6a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 150,
                            CategoryID = new Guid("f5b07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Discover the latest in technology.",
                            EndDate = new DateTime(2025, 11, 16, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Tech Expo",
                            NumberOfParticipants = 130,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 16, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("b7a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 100,
                            CategoryID = new Guid("fbb07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Laugh out loud at our comedy show.",
                            EndDate = new DateTime(2025, 11, 17, 21, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Comedy Show",
                            NumberOfParticipants = 80,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 17, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("b8a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 50,
                            CategoryID = new Guid("c2c07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Share your hobbies with others.",
                            EndDate = new DateTime(2025, 11, 18, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Hobbies Meetup",
                            NumberOfParticipants = 40,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 18, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        },
                        new
                        {
                            EventId = new Guid("b9a07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            Address = "Ndk, Bulgaria Blvd, 1463 Sofia",
                            Capacity = 30,
                            CategoryID = new Guid("c4c07384-d9a0-4e6b-8a1d-4f4b8f8b8f8b"),
                            CreatedOnDate = new DateTime(2025, 10, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Enjoy a walk in nature.",
                            EndDate = new DateTime(2025, 11, 19, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "/images/image-not-found-event.png",
                            Name = "Nature Walk",
                            NumberOfParticipants = 20,
                            OrganizerID = new Guid("00000000-0000-0000-0000-000000000001"),
                            StartDate = new DateTime(2025, 11, 19, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            isDeleted = false
                        });
                });

            modelBuilder.Entity("STAREvents.Data.Models.EventCategory", b =>
                {
                    b.Property<Guid>("EventID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("EventsCategories");
                });

            modelBuilder.Entity("STAREvents.Data.Models.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("NotificationId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("STAREvents.Data.Models.UserEventAttendance", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersEventAttendances");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("STAREvents.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("STAREvents.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STAREvents.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("STAREvents.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("STAREvents.Data.Models.Comment", b =>
                {
                    b.HasOne("STAREvents.Data.Models.Event", "Event")
                        .WithMany("EventComments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STAREvents.Data.Models.ApplicationUser", "User")
                        .WithMany("UserComments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("STAREvents.Data.Models.Event", b =>
                {
                    b.HasOne("STAREvents.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STAREvents.Data.Models.ApplicationUser", "Organizer")
                        .WithMany("OrganizedEvents")
                        .HasForeignKey("OrganizerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("STAREvents.Data.Models.EventCategory", b =>
                {
                    b.HasOne("STAREvents.Data.Models.Category", "Category")
                        .WithMany("EventCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STAREvents.Data.Models.Event", "Event")
                        .WithMany("EventCategories")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("STAREvents.Data.Models.Notification", b =>
                {
                    b.HasOne("STAREvents.Data.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STAREvents.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("STAREvents.Data.Models.UserEventAttendance", b =>
                {
                    b.HasOne("STAREvents.Data.Models.Event", "Event")
                        .WithMany("UserEventAttendances")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STAREvents.Data.Models.ApplicationUser", "User")
                        .WithMany("UserEventAttendances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("STAREvents.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("OrganizedEvents");

                    b.Navigation("UserComments");

                    b.Navigation("UserEventAttendances");
                });

            modelBuilder.Entity("STAREvents.Data.Models.Category", b =>
                {
                    b.Navigation("EventCategories");
                });

            modelBuilder.Entity("STAREvents.Data.Models.Event", b =>
                {
                    b.Navigation("EventCategories");

                    b.Navigation("EventComments");

                    b.Navigation("UserEventAttendances");
                });
#pragma warning restore 612, 618
        }
    }
}
