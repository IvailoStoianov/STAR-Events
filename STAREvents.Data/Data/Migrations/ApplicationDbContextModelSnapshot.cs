// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STAREvents.Web.Data;

#nullable disable

namespace STAREvents.Web.Data.Migrations
{
    [DbContext(typeof(STAREventsDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("STAREvents.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser", (string)null);
                });

            modelBuilder.Entity("STAREvents.Data.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            Name = "Music"
                        },
                        new
                        {
                            CategoryID = 2,
                            Name = "Sports"
                        },
                        new
                        {
                            CategoryID = 3,
                            Name = "Technology"
                        },
                        new
                        {
                            CategoryID = 4,
                            Name = "Education"
                        },
                        new
                        {
                            CategoryID = 5,
                            Name = "Health"
                        },
                        new
                        {
                            CategoryID = 6,
                            Name = "Art"
                        },
                        new
                        {
                            CategoryID = 7,
                            Name = "Business"
                        },
                        new
                        {
                            CategoryID = 8,
                            Name = "Science"
                        },
                        new
                        {
                            CategoryID = 9,
                            Name = "Comedy"
                        },
                        new
                        {
                            CategoryID = 10,
                            Name = "Travel"
                        },
                        new
                        {
                            CategoryID = 11,
                            Name = "Lifestyle"
                        },
                        new
                        {
                            CategoryID = 12,
                            Name = "Fitness"
                        },
                        new
                        {
                            CategoryID = 13,
                            Name = "Gaming"
                        },
                        new
                        {
                            CategoryID = 14,
                            Name = "Cooking"
                        },
                        new
                        {
                            CategoryID = 15,
                            Name = "History"
                        },
                        new
                        {
                            CategoryID = 16,
                            Name = "Politics"
                        },
                        new
                        {
                            CategoryID = 17,
                            Name = "Finance"
                        },
                        new
                        {
                            CategoryID = 18,
                            Name = "Nature"
                        },
                        new
                        {
                            CategoryID = 19,
                            Name = "Photography"
                        },
                        new
                        {
                            CategoryID = 20,
                            Name = "Writing"
                        },
                        new
                        {
                            CategoryID = 21,
                            Name = "Dance"
                        },
                        new
                        {
                            CategoryID = 22,
                            Name = "Film"
                        },
                        new
                        {
                            CategoryID = 23,
                            Name = "Literature"
                        },
                        new
                        {
                            CategoryID = 24,
                            Name = "Environment"
                        },
                        new
                        {
                            CategoryID = 25,
                            Name = "Social"
                        },
                        new
                        {
                            CategoryID = 26,
                            Name = "Community"
                        },
                        new
                        {
                            CategoryID = 27,
                            Name = "Theatre"
                        },
                        new
                        {
                            CategoryID = 28,
                            Name = "Networking"
                        },
                        new
                        {
                            CategoryID = 29,
                            Name = "Charity"
                        },
                        new
                        {
                            CategoryID = 30,
                            Name = "Hobbies"
                        });
                });

            modelBuilder.Entity("STAREvents.Data.Models.Event", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventID"));

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<int>("MaxAttendees")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("OrganizerID")
                        .HasColumnType("int");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VenueID")
                        .HasColumnType("int");

                    b.HasKey("EventID");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CategoryID");

                    b.HasIndex("OrganizerID");

                    b.HasIndex("VenueID");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("STAREvents.Data.Models.EventCategory", b =>
                {
                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("EventID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("EventCategories", (string)null);
                });

            modelBuilder.Entity("STAREvents.Data.Models.Organizer", b =>
                {
                    b.Property<int>("OrganizerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizerID"));

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("OrganizerID");

                    b.ToTable("Organizers", (string)null);

                    b.HasData(
                        new
                        {
                            OrganizerID = 1,
                            ContactInfo = "john.doe@example.com",
                            Name = "John Doe"
                        },
                        new
                        {
                            OrganizerID = 2,
                            ContactInfo = "jane.smith@example.com",
                            Name = "Jane Smith"
                        },
                        new
                        {
                            OrganizerID = 3,
                            ContactInfo = "emily.johnson@example.com",
                            Name = "Emily Johnson"
                        },
                        new
                        {
                            OrganizerID = 4,
                            ContactInfo = "michael.brown@example.com",
                            Name = "Michael Brown"
                        },
                        new
                        {
                            OrganizerID = 5,
                            ContactInfo = "sarah.wilson@example.com",
                            Name = "Sarah Wilson"
                        },
                        new
                        {
                            OrganizerID = 6,
                            ContactInfo = "david.martinez@example.com",
                            Name = "David Martinez"
                        },
                        new
                        {
                            OrganizerID = 7,
                            ContactInfo = "chris.lee@example.com",
                            Name = "Chris Lee"
                        },
                        new
                        {
                            OrganizerID = 8,
                            ContactInfo = "jessica.white@example.com",
                            Name = "Jessica White"
                        },
                        new
                        {
                            OrganizerID = 9,
                            ContactInfo = "daniel.harris@example.com",
                            Name = "Daniel Harris"
                        },
                        new
                        {
                            OrganizerID = 10,
                            ContactInfo = "laura.thompson@example.com",
                            Name = "Laura Thompson"
                        },
                        new
                        {
                            OrganizerID = 11,
                            ContactInfo = "tom.clark@example.com",
                            Name = "Tom Clark"
                        },
                        new
                        {
                            OrganizerID = 12,
                            ContactInfo = "anna.lewis@example.com",
                            Name = "Anna Lewis"
                        },
                        new
                        {
                            OrganizerID = 13,
                            ContactInfo = "robert.walker@example.com",
                            Name = "Robert Walker"
                        },
                        new
                        {
                            OrganizerID = 14,
                            ContactInfo = "lisa.hall@example.com",
                            Name = "Lisa Hall"
                        },
                        new
                        {
                            OrganizerID = 15,
                            ContactInfo = "mark.allen@example.com",
                            Name = "Mark Allen"
                        },
                        new
                        {
                            OrganizerID = 16,
                            ContactInfo = "sophie.young@example.com",
                            Name = "Sophie Young"
                        },
                        new
                        {
                            OrganizerID = 17,
                            ContactInfo = "james.hernandez@example.com",
                            Name = "James Hernandez"
                        },
                        new
                        {
                            OrganizerID = 18,
                            ContactInfo = "emma.king@example.com",
                            Name = "Emma King"
                        },
                        new
                        {
                            OrganizerID = 19,
                            ContactInfo = "brian.wright@example.com",
                            Name = "Brian Wright"
                        },
                        new
                        {
                            OrganizerID = 20,
                            ContactInfo = "olivia.scott@example.com",
                            Name = "Olivia Scott"
                        },
                        new
                        {
                            OrganizerID = 21,
                            ContactInfo = "kevin.green@example.com",
                            Name = "Kevin Green"
                        },
                        new
                        {
                            OrganizerID = 22,
                            ContactInfo = "evelyn.adams@example.com",
                            Name = "Evelyn Adams"
                        },
                        new
                        {
                            OrganizerID = 23,
                            ContactInfo = "jason.baker@example.com",
                            Name = "Jason Baker"
                        },
                        new
                        {
                            OrganizerID = 24,
                            ContactInfo = "isabella.nelson@example.com",
                            Name = "Isabella Nelson"
                        },
                        new
                        {
                            OrganizerID = 25,
                            ContactInfo = "ryan.carter@example.com",
                            Name = "Ryan Carter"
                        },
                        new
                        {
                            OrganizerID = 26,
                            ContactInfo = "grace.mitchell@example.com",
                            Name = "Grace Mitchell"
                        },
                        new
                        {
                            OrganizerID = 27,
                            ContactInfo = "ethan.perez@example.com",
                            Name = "Ethan Perez"
                        },
                        new
                        {
                            OrganizerID = 28,
                            ContactInfo = "charlotte.roberts@example.com",
                            Name = "Charlotte Roberts"
                        },
                        new
                        {
                            OrganizerID = 29,
                            ContactInfo = "henry.turner@example.com",
                            Name = "Henry Turner"
                        },
                        new
                        {
                            OrganizerID = 30,
                            ContactInfo = "sofia.phillips@example.com",
                            Name = "Sofia Phillips"
                        });
                });

            modelBuilder.Entity("STAREvents.Data.Models.Ticket", b =>
                {
                    b.Property<int>("TicketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TicketID"));

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TicketID");

                    b.HasIndex("EventID");

                    b.HasIndex("UserID");

                    b.ToTable("Tickets", (string)null);
                });

            modelBuilder.Entity("STAREvents.Data.Models.Venue", b =>
                {
                    b.Property<int>("VenueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VenueID"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VenueID");

                    b.ToTable("Venues", (string)null);

                    b.HasData(
                        new
                        {
                            VenueID = 1,
                            Capacity = 500,
                            Location = "Main Street",
                            Name = "City Hall"
                        },
                        new
                        {
                            VenueID = 2,
                            Capacity = 1000,
                            Location = "Central Park",
                            Name = "Sports Arena"
                        },
                        new
                        {
                            VenueID = 3,
                            Capacity = 300,
                            Location = "Broadway",
                            Name = "Downtown Theater"
                        },
                        new
                        {
                            VenueID = 4,
                            Capacity = 800,
                            Location = "1st Avenue",
                            Name = "Conference Center"
                        },
                        new
                        {
                            VenueID = 5,
                            Capacity = 2000,
                            Location = "West End",
                            Name = "Open Air Stadium"
                        },
                        new
                        {
                            VenueID = 6,
                            Capacity = 200,
                            Location = "Museum District",
                            Name = "Art Gallery"
                        },
                        new
                        {
                            VenueID = 7,
                            Capacity = 150,
                            Location = "East Side",
                            Name = "Community Hall"
                        },
                        new
                        {
                            VenueID = 8,
                            Capacity = 1000,
                            Location = "Silicon Valley",
                            Name = "Tech Park"
                        },
                        new
                        {
                            VenueID = 9,
                            Capacity = 400,
                            Location = "5th Street",
                            Name = "Music Club"
                        },
                        new
                        {
                            VenueID = 10,
                            Capacity = 700,
                            Location = "Downtown",
                            Name = "Grand Ballroom"
                        },
                        new
                        {
                            VenueID = 11,
                            Capacity = 1200,
                            Location = "College Road",
                            Name = "University Auditorium"
                        },
                        new
                        {
                            VenueID = 12,
                            Capacity = 300,
                            Location = "Lakeside",
                            Name = "Lakeview Pavilion"
                        },
                        new
                        {
                            VenueID = 13,
                            Capacity = 5000,
                            Location = "South Park",
                            Name = "City Park"
                        },
                        new
                        {
                            VenueID = 14,
                            Capacity = 100,
                            Location = "Downtown Heights",
                            Name = "Skyscraper Rooftop"
                        },
                        new
                        {
                            VenueID = 15,
                            Capacity = 400,
                            Location = "Library Avenue",
                            Name = "National Library"
                        },
                        new
                        {
                            VenueID = 16,
                            Capacity = 600,
                            Location = "Science Blvd",
                            Name = "Science Museum"
                        },
                        new
                        {
                            VenueID = 17,
                            Capacity = 200,
                            Location = "Greenway",
                            Name = "Botanical Garden"
                        },
                        new
                        {
                            VenueID = 18,
                            Capacity = 1000,
                            Location = "Opera Lane",
                            Name = "Opera House"
                        },
                        new
                        {
                            VenueID = 19,
                            Capacity = 2500,
                            Location = "Expo Road",
                            Name = "Convention Hall"
                        },
                        new
                        {
                            VenueID = 20,
                            Capacity = 1500,
                            Location = "Rock Valley",
                            Name = "Amphitheater"
                        },
                        new
                        {
                            VenueID = 21,
                            Capacity = 300,
                            Location = "School Street",
                            Name = "City High School Gym"
                        },
                        new
                        {
                            VenueID = 22,
                            Capacity = 1000,
                            Location = "Town Center",
                            Name = "Town Square"
                        },
                        new
                        {
                            VenueID = 23,
                            Capacity = 600,
                            Location = "Downtown Circle",
                            Name = "Main Event Plaza"
                        },
                        new
                        {
                            VenueID = 24,
                            Capacity = 500,
                            Location = "Beachside",
                            Name = "Luxury Resort"
                        },
                        new
                        {
                            VenueID = 25,
                            Capacity = 1200,
                            Location = "North Ridge",
                            Name = "Indoor Sports Complex"
                        },
                        new
                        {
                            VenueID = 26,
                            Capacity = 200,
                            Location = "Central Station",
                            Name = "Railway Auditorium"
                        },
                        new
                        {
                            VenueID = 27,
                            Capacity = 5000,
                            Location = "North Edge",
                            Name = "Open Grounds"
                        },
                        new
                        {
                            VenueID = 28,
                            Capacity = 150,
                            Location = "Vintage Road",
                            Name = "Old Town Theater"
                        },
                        new
                        {
                            VenueID = 29,
                            Capacity = 350,
                            Location = "Fitness Avenue",
                            Name = "Fitness Center Arena"
                        },
                        new
                        {
                            VenueID = 30,
                            Capacity = 800,
                            Location = "Event Street",
                            Name = "Downtown Events Hall"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("STAREvents.Data.Models.Event", b =>
                {
                    b.HasOne("STAREvents.Data.Models.ApplicationUser", null)
                        .WithMany("OrganizedEvents")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("STAREvents.Data.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STAREvents.Data.Models.Organizer", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("OrganizerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STAREvents.Data.Models.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Organizer");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("STAREvents.Data.Models.EventCategory", b =>
                {
                    b.HasOne("STAREvents.Data.Models.Category", "Category")
                        .WithMany("EventCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("STAREvents.Data.Models.Event", "Event")
                        .WithMany("EventCategories")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("STAREvents.Data.Models.Ticket", b =>
                {
                    b.HasOne("STAREvents.Data.Models.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STAREvents.Data.Models.ApplicationUser", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("STAREvents.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("OrganizedEvents");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("STAREvents.Data.Models.Category", b =>
                {
                    b.Navigation("EventCategories");
                });

            modelBuilder.Entity("STAREvents.Data.Models.Event", b =>
                {
                    b.Navigation("EventCategories");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("STAREvents.Data.Models.Organizer", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("STAREvents.Data.Models.Venue", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
